blueprint:
  name: Alexa Echo Volume Control
  description: >
    Automatically adjusts volume levels of Alexa Echo devices based on mode changes (night mode, presence detection, etc.).
    Works with Home Assistant's Alexa Media Player integration to control Echo volume entities.
    Replicates the functionality of the original ioBroker Echo volume script.
  domain: automation
  input:
    mode_entity:
      name: Mode Control Entity
      description: Entity that triggers volume changes (e.g., night mode helper, presence sensor)
      selector:
        entity:
          domain: 
            - input_boolean
            - binary_sensor
            - sensor
            - switch
      default: ""
    
    echo_entities:
      name: Echo Volume Entities
      description: Echo volume entities to control (leave empty to auto-discover all Echo devices)
      selector:
        entity:
          domain:
            - number
            - input_number
          multiple: true
      default: []
    
    low_volume:
      name: Low Volume Level
      description: Volume level when mode is active (0-100)
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
      default: 20
    
    high_volume:
      name: High Volume Level  
      description: Volume level when mode is inactive (0-100)
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
      default: 40
    
    ignore_entities:
      name: Ignored Echo Devices
      description: Echo entities to exclude from automatic control
      selector:
        entity:
          multiple: true
      default: []
    
    ignore_patterns:
      name: Ignore Patterns
      description: Device name patterns to ignore (e.g., specific room names like "basement", "garage")
      selector:
        text:
          multiline: true
      default: ""
    
    special_device:
      name: Special Echo Device (Optional)
      description: Echo entity that gets different volume levels
      selector:
        entity:
      default: ""
    
    special_low_volume:
      name: Special Device Low Volume
      description: Special Echo device volume when mode is active (0-100)
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
      default: 30
    
    special_high_volume:
      name: Special Device High Volume
      description: Special Echo device volume when mode is inactive (0-100)
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
      default: 80
    
    use_random_delay:
      name: Use Random Delays
      description: Add random delays to prevent simultaneous commands (like original ioBroker script)
      selector:
        boolean:
      default: true
    
    max_delay:
      name: Maximum Random Delay
      description: Maximum delay in seconds for randomization
      selector:
        number:
          min: 1
          max: 30
          step: 1
          unit_of_measurement: "seconds"
      default: 10
    
    special_delay:
      name: Special Device Delay
      description: Fixed delay for special device in seconds
      selector:
        number:
          min: 0
          max: 60
          step: 1
          unit_of_measurement: "seconds"
      default: 15

variables:
  mode_entity: !input mode_entity
  echo_entities: !input echo_entities
  low_volume: !input low_volume
  high_volume: !input high_volume
  ignore_entities: !input ignore_entities
  ignore_patterns: !input ignore_patterns
  special_device: !input special_device
  special_low_volume: !input special_low_volume
  special_high_volume: !input special_high_volume
  use_random_delay: !input use_random_delay
  max_delay: !input max_delay
  special_delay: !input special_delay

trigger:
  - platform: state
    entity_id: !input mode_entity
    id: "mode_change"

condition:
  # Only trigger when the entity actually changes state (not just attributes)
  - condition: template
    value_template: "{{ trigger.from_state.state != trigger.to_state.state }}"

action:
  - variables:
      # Determine if mode is active (various entity types)
      mode_active: >
        {% if mode_entity.startswith('input_boolean.') or mode_entity.startswith('switch.') %}
          {{ is_state(mode_entity, 'on') }}
        {% elif mode_entity.startswith('binary_sensor.') %}
          {{ is_state(mode_entity, 'on') }}
        {% else %}
          {{ states(mode_entity) in ['on', 'true', 'active', 'home'] }}
        {% endif %}
      
      # Get target volume based on mode
      target_volume: >
        {{ special_low_volume if mode_active else special_high_volume }}
      
      normal_volume: >
        {{ low_volume if mode_active else high_volume }}
      
      # Get patterns to ignore
      ignore_pattern_list: >
        {% if ignore_patterns.strip() != '' %}
          {{ ignore_patterns.strip().split('\n') }}
        {% else %}
          []
        {% endif %}
      
      # Get list of Echo volume entities to control
      all_echo_entities: >
        {% if echo_entities | length > 0 %}
          {{ echo_entities }}
        {% else %}
          {% set all_entities = [] %}
          
          {# Find number entities for Echo devices #}
          {% for entity in states.number %}
            {% set entity_name = entity.entity_id.lower() %}
            {% if ('alexa' in entity_name or 'echo' in entity_name or 'lautsprecher' in entity_name) and 'volume' in entity_name %}
              {% set all_entities = all_entities + [entity.entity_id] %}
            {% endif %}
          {% endfor %}
          
          {# Find input_number entities for Echo devices #}
          {% for entity in states.input_number %}
            {% set entity_name = entity.entity_id.lower() %}
            {% if ('alexa' in entity_name or 'echo' in entity_name or 'lautsprecher' in entity_name) and 'volume' in entity_name %}
              {% set all_entities = all_entities + [entity.entity_id] %}
            {% endif %}
          {% endfor %}
          
          {{ all_entities }}
        {% endif %}
      
      # Filter out ignored entities and patterns
      filtered_entities: >
        {% set entities = all_echo_entities %}
        {% set ignored_entities = ignore_entities %}
        {% set ignored_patterns = ignore_pattern_list %}
        {% set result = [] %}
        
        {% for entity in entities %}
          {% set skip_entity = false %}
          
          {# Check ignore list #}
          {% if entity in ignored_entities %}
            {% set skip_entity = true %}
          {% endif %}
          
          {# Check ignore patterns #}
          {% for pattern in ignored_patterns %}
            {% if pattern.strip() != '' and pattern.strip().lower() in entity.lower() %}
              {% set skip_entity = true %}
            {% endif %}
          {% endfor %}
          
          {% if not skip_entity %}
            {% set result = result + [entity] %}
          {% endif %}
        {% endfor %}
        
        {{ result }}

  # Control normal Echo volume entities
  - repeat:
      for_each: "{{ filtered_entities }}"
      sequence:
        - condition: template
          value_template: "{{ repeat.item != special_device }}"
        
        - variables:
            random_delay: >
              {% if use_random_delay %}
                {{ range(1, max_delay * 1000) | random / 1000 }}
              {% else %}
                0
              {% endif %}
        
        - delay:
            seconds: "{{ random_delay }}"
        
        # Use appropriate service based on entity domain
        - choose:
            # Number entities (most Alexa volume controls)
            - conditions:
                - condition: template
                  value_template: "{{ repeat.item.startswith('number.') }}"
              sequence:
                - service: number.set_value
                  target:
                    entity_id: "{{ repeat.item }}"
                  data:
                    value: "{{ normal_volume }}"
                  continue_on_error: true
            
            # Input number entities
            - conditions:
                - condition: template
                  value_template: "{{ repeat.item.startswith('input_number.') }}"
              sequence:
                - service: input_number.set_value
                  target:
                    entity_id: "{{ repeat.item }}"
                  data:
                    value: "{{ normal_volume }}"
                  continue_on_error: true

  # Control special Echo device if specified
  - condition: template
    value_template: "{{ special_device != '' }}"
  
  - delay:
      seconds: "{{ special_delay }}"
  
  # Use appropriate service for special device
  - choose:
      # Number entities (most Alexa volume controls)
      - conditions:
          - condition: template
            value_template: "{{ special_device.startswith('number.') }}"
        sequence:
          - service: number.set_value
            target:
              entity_id: "{{ special_device }}"
            data:
              value: "{{ target_volume }}"
            continue_on_error: true
      
      # Input number entities
      - conditions:
          - condition: template
            value_template: "{{ special_device.startswith('input_number.') }}"
        sequence:
          - service: input_number.set_value
            target:
              entity_id: "{{ special_device }}"
            data:
              value: "{{ target_volume }}"
            continue_on_error: true 