blueprint:
  name: Smart Alexa Echo Volume Control
  description: >
    Automatically adjusts volume levels of Alexa Echo devices based on time schedules.
    Works with Home Assistant's Alexa Media Player integration to control Echo volume entities.
    Improved version with time-based triggers instead of entity-based triggers.
  domain: automation
  input:
    night_mode_start:
      name: Night Mode Start Time
      description: Time when night mode (low volume) starts
      selector:
        time: {}
      default: "22:00"
    
    night_mode_end:
      name: Night Mode End Time
      description: Time when night mode (low volume) ends
      selector:
        time: {}
      default: "07:00"
    
    active_days:
      name: Active Days
      description: Days when volume control is active
      selector:
        select:
          options:
            - label: "Every Day"
              value: "everyday"
            - label: "Weekdays Only"
              value: "weekdays"
            - label: "Weekends Only"
              value: "weekends"
            - label: "Custom"
              value: "custom"
          multiple: false
      default: "everyday"
    
    custom_days:
      name: Custom Days
      description: Select specific days (only used if 'Custom' is selected above)
      selector:
        select:
          options:
            - label: "Monday"
              value: "1"
            - label: "Tuesday"
              value: "2"
            - label: "Wednesday"
              value: "3"
            - label: "Thursday"
              value: "4"
            - label: "Friday"
              value: "5"
            - label: "Saturday"
              value: "6"
            - label: "Sunday"
              value: "7"
          multiple: true
      default: []
    
    echo_entities:
      name: Echo Volume Entities
      description: Select specific Echo volume entities to control (leave empty for auto-discovery)
      selector:
        entity:
          domain: media_player
          integration: alexa_media
          multiple: true
      default: []
    
    low_volume:
      name: Night Mode Volume Level
      description: Volume level during night mode (0-100)
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
          mode: slider
      default: 20
    
    high_volume:
      name: Day Mode Volume Level  
      description: Volume level during day mode (0-100)
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
          mode: slider
      default: 40
    
    ignore_entities:
      name: Ignored Echo Devices
      description: Echo entities to exclude from automatic control
      selector:
        entity:
          domain: media_player
          integration: alexa_media
          multiple: true
      default: []
    
    ignore_patterns:
      name: Ignore Device Name Patterns
      description: Device name patterns to ignore (one per line, e.g., "basement", "garage", "bedroom")
      selector:
        text:
          multiline: true
      default: ""
    
    special_device:
      name: Special Echo Device (Optional)
      description: Echo entity that gets different volume levels than the others
      selector:
        entity:
          domain: media_player
          integration: alexa_media
          multiple: false
      default: ""
    
    special_low_volume:
      name: Special Device Night Volume
      description: Special Echo device volume during night mode (0-100)
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
          mode: slider
      default: 30
    
    special_high_volume:
      name: Special Device Day Volume
      description: Special Echo device volume during day mode (0-100)
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
          mode: slider
      default: 80
    
    use_random_delay:
      name: Use Random Delays
      description: Add random delays to prevent simultaneous commands (recommended for many devices)
      selector:
        boolean: {}
      default: true
    
    max_delay:
      name: Maximum Random Delay
      description: Maximum delay in seconds for randomization
      selector:
        number:
          min: 1
          max: 30
          step: 1
          unit_of_measurement: "seconds"
          mode: slider
      default: 10
    
    special_delay:
      name: Special Device Delay
      description: Fixed delay for special device in seconds
      selector:
        number:
          min: 0
          max: 60
          step: 1
          unit_of_measurement: "seconds"
          mode: slider
      default: 15

  source_url: https://github.com/your-repo/HomeAssistant/blob/main/SmartVolumeControl/SmartVolumeControl.yaml

variables:
  night_mode_start: !input night_mode_start
  night_mode_end: !input night_mode_end
  active_days_input: !input active_days
  custom_days_input: !input custom_days
  echo_entities: !input echo_entities
  low_volume: !input low_volume
  high_volume: !input high_volume
  ignore_entities: !input ignore_entities
  ignore_patterns: !input ignore_patterns
  special_device: !input special_device
  special_low_volume: !input special_low_volume
  special_high_volume: !input special_high_volume
  use_random_delay: !input use_random_delay
  max_delay: !input max_delay
  special_delay: !input special_delay
  
  # Calculate active days
  active_days: >-
    {% if active_days_input == "weekdays" %}
      [1, 2, 3, 4, 5]
    {% elif active_days_input == "everyday" %}
      [1, 2, 3, 4, 5, 6, 7]
    {% elif active_days_input == "weekends" %}
      [6, 7]
    {% elif active_days_input == "custom" %}
      {{ custom_days_input | map('int') | list }}
    {% else %}
      [1, 2, 3, 4, 5, 6, 7]
    {% endif %}

trigger:
  # Night mode starts
  - platform: time
    at: !input night_mode_start
    id: "night_mode_start"
  
  # Night mode ends (day mode starts)
  - platform: time
    at: !input night_mode_end
    id: "day_mode_start"

condition:
  # Check if today is an active day
  - condition: template
    value_template: >
      {% set today = now().isoweekday() %}
      {{ today in active_days }}

action:
  - variables:
      # Determine if we're entering night mode or day mode
      is_night_mode: >
        {{ trigger.id == "night_mode_start" }}
      
      # Get target volumes based on mode
      target_volume: >
        {{ (special_low_volume if is_night_mode else special_high_volume) }}
      
      normal_volume: >
        {{ (low_volume if is_night_mode else high_volume) }}
      
      # Get patterns to ignore
      ignore_pattern_list: >
        {% if ignore_patterns.strip() != '' %}
          {{ ignore_patterns.strip().split('\n') }}
        {% else %}
          []
        {% endif %}
      
      # Get list of Echo media_player entities to control
      all_echo_entities: >
        {% if echo_entities | length > 0 %}
          {{ echo_entities }}
        {% else %}
          {% set all_entities = [] %}
          
          {# Find Alexa Media Player entities #}
          {% for entity in states.media_player %}
            {% if state_attr(entity.entity_id, 'integration') == 'alexa_media' %}
              {% set all_entities = all_entities + [entity.entity_id] %}
            {% endif %}
          {% endfor %}
          
          {{ all_entities }}
        {% endif %}
      
      # Filter out ignored entities and patterns
      filtered_entities: >
        {% set entities = all_echo_entities %}
        {% set ignored_entities = ignore_entities %}
        {% set ignored_patterns = ignore_pattern_list %}
        {% set result = [] %}
        
        {% for entity in entities %}
          {% set skip_entity = false %}
          
          {# Check ignore list #}
          {% if entity in ignored_entities %}
            {% set skip_entity = true %}
          {% endif %}
          
          {# Check ignore patterns #}
          {% for pattern in ignored_patterns %}
            {% if pattern.strip() != '' and pattern.strip().lower() in entity.lower() %}
              {% set skip_entity = true %}
            {% endif %}
          {% endfor %}
          
          {% if not skip_entity %}
            {% set result = result + [entity] %}
          {% endif %}
        {% endfor %}
        
        {{ result }}

  # Control normal Echo volume entities
  - repeat:
      for_each: "{{ filtered_entities }}"
      sequence:
        - condition: template
          value_template: "{{ repeat.item != special_device }}"
        
        - variables:
            random_delay: >
              {% if use_random_delay %}
                {{ range(1, max_delay * 1000) | random / 1000 }}
              {% else %}
                0
              {% endif %}
        
        - delay:
            seconds: "{{ random_delay }}"
        
        # Set volume for Alexa Media Player
        - service: media_player.volume_set
          target:
            entity_id: "{{ repeat.item }}"
          data:
            volume_level: "{{ normal_volume / 100 }}"
          continue_on_error: true

  # Control special Echo device if specified
  - condition: template
    value_template: "{{ special_device != '' }}"
  
  - delay:
      seconds: "{{ special_delay }}"
  
  # Set volume for special device
  - service: media_player.volume_set
    target:
      entity_id: "{{ special_device }}"
    data:
      volume_level: "{{ target_volume / 100 }}"
    continue_on_error: true

mode: single 