blueprint:
  name: Smart Volume Control for Smart Assistants
  description: >
    Automatically adjusts volume levels of smart assistants (Echo, Google Home, etc.) based on mode changes.
    Works with Home Assistant's Alexa Media Player integration and other smart assistant integrations.
    Supports ignore lists, special device handling, and configurable volume levels.
  domain: automation
  input:
    mode_entity:
      name: Mode Control Entity
      description: Entity that triggers volume changes (e.g., night mode helper, presence sensor)
      selector:
        entity:
          domain: 
            - input_boolean
            - binary_sensor
            - sensor
            - switch
      default: ""
    
    assistant_players:
      name: Smart Assistant Media Players
      description: Media players to control (leave empty to auto-discover Alexa, Google, etc.)
      selector:
        entity:
          domain: media_player
          multiple: true
      default: []
    
    device_patterns:
      name: Device Name Patterns
      description: Patterns to identify smart assistants (one per line)
      selector:
        text:
          multiline: true
      default: |
        echo
        alexa
        google
        nest
        assistant
    
    low_volume:
      name: Low Volume Level
      description: Volume level when mode is active (0-100)
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
      default: 20
    
    high_volume:
      name: High Volume Level  
      description: Volume level when mode is inactive (0-100)
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
      default: 40
    
    ignore_entities:
      name: Ignored Media Players
      description: Media players to exclude from automatic control
      selector:
        entity:
          domain: media_player
          multiple: true
      default: []
    
    ignore_patterns:
      name: Ignore Patterns
      description: Device name patterns to ignore (e.g., specific room names)
      selector:
        text:
          multiline: true
      default: ""
    
    special_device:
      name: Special Device (Optional)
      description: Media player that gets different volume levels
      selector:
        entity:
          domain: media_player
      default: ""
    
    special_low_volume:
      name: Special Device Low Volume
      description: Special device volume when mode is active (0-100)
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
      default: 30
    
    special_high_volume:
      name: Special Device High Volume
      description: Special device volume when mode is inactive (0-100)
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
      default: 80
    
    use_random_delay:
      name: Use Random Delays
      description: Add random delays to prevent simultaneous commands
      selector:
        boolean:
      default: true
    
    max_delay:
      name: Maximum Random Delay
      description: Maximum delay in seconds for randomization
      selector:
        number:
          min: 1
          max: 30
          step: 1
          unit_of_measurement: "seconds"
      default: 10
    
    special_delay:
      name: Special Device Delay
      description: Fixed delay for special device in seconds
      selector:
        number:
          min: 0
          max: 60
          step: 1
          unit_of_measurement: "seconds"
      default: 15

variables:
  mode_entity: !input mode_entity
  assistant_players: !input assistant_players
  device_patterns: !input device_patterns
  low_volume: !input low_volume
  high_volume: !input high_volume
  ignore_entities: !input ignore_entities
  ignore_patterns: !input ignore_patterns
  special_device: !input special_device
  special_low_volume: !input special_low_volume
  special_high_volume: !input special_high_volume
  use_random_delay: !input use_random_delay
  max_delay: !input max_delay
  special_delay: !input special_delay

trigger:
  - platform: state
    entity_id: !input mode_entity
    id: "mode_change"

condition:
  # Only trigger when the entity actually changes state (not just attributes)
  - condition: template
    value_template: "{{ trigger.from_state.state != trigger.to_state.state }}"

action:
  - variables:
      # Determine if mode is active (various entity types)
      mode_active: >
        {% if mode_entity.startswith('input_boolean.') or mode_entity.startswith('switch.') %}
          {{ is_state(mode_entity, 'on') }}
        {% elif mode_entity.startswith('binary_sensor.') %}
          {{ is_state(mode_entity, 'on') }}
        {% else %}
          {{ states(mode_entity) in ['on', 'true', 'active', 'home'] }}
        {% endif %}
      
      # Get target volume based on mode (convert to 0.0-1.0 scale)
      target_volume: >
        {{ (special_low_volume if mode_active else special_high_volume) / 100 }}
      
      normal_volume: >
        {{ (low_volume if mode_active else high_volume) / 100 }}
      
      # Get patterns to ignore
      ignore_pattern_list: >
        {% if ignore_patterns.strip() != '' %}
          {{ ignore_patterns.strip().split('\n') }}
        {% else %}
          []
        {% endif %}
      
      # Get patterns to identify smart assistants
      assistant_pattern_list: >
        {% if device_patterns.strip() != '' %}
          {{ device_patterns.strip().split('\n') }}
        {% else %}
          ['echo', 'alexa', 'google', 'nest', 'assistant']
        {% endif %}
      
      # Get list of media players to control
      media_players: >
        {% if assistant_players | length > 0 %}
          {{ assistant_players }}
        {% else %}
          {% set all_players = [] %}
          {% set patterns = assistant_pattern_list %}
          
          {# Find smart assistant media players #}
          {% for entity in states.media_player %}
            {% set entity_name = entity.entity_id.lower() %}
            {% for pattern in patterns %}
              {% if pattern.strip().lower() in entity_name %}
                {% set all_players = all_players + [entity.entity_id] %}
                {% break %}
              {% endif %}
            {% endfor %}
          {% endfor %}
          
          {{ all_players }}
        {% endif %}
      
      # Filter out ignored entities and patterns
      filtered_players: >
        {% set players = media_players %}
        {% set ignored_entities = ignore_entities %}
        {% set ignored_patterns = ignore_pattern_list %}
        {% set result = [] %}
        
        {% for entity in players %}
          {% set skip_entity = false %}
          
          {# Check ignore list #}
          {% if entity in ignored_entities %}
            {% set skip_entity = true %}
          {% endif %}
          
          {# Check ignore patterns #}
          {% for pattern in ignored_patterns %}
            {% if pattern.strip() != '' and pattern.strip().lower() in entity.lower() %}
              {% set skip_entity = true %}
            {% endif %}
          {% endfor %}
          
          {% if not skip_entity %}
            {% set result = result + [entity] %}
          {% endif %}
        {% endfor %}
        
        {{ result }}

  # Control normal media players
  - repeat:
      for_each: "{{ filtered_players }}"
      sequence:
        - condition: template
          value_template: "{{ repeat.item != special_device }}"
        
        - variables:
            random_delay: >
              {% if use_random_delay %}
                {{ range(1, max_delay * 1000) | random / 1000 }}
              {% else %}
                0
              {% endif %}
        
        - delay:
            seconds: "{{ random_delay }}"
        
        - service: media_player.volume_set
          target:
            entity_id: "{{ repeat.item }}"
          data:
            volume_level: "{{ normal_volume }}"
          continue_on_error: true

  # Control special device if specified
  - condition: template
    value_template: "{{ special_device != '' }}"
  
  - delay:
      seconds: "{{ special_delay }}"
  
  - service: media_player.volume_set
    target:
      entity_id: "{{ special_device }}"
    data:
      volume_level: "{{ target_volume }}"
    continue_on_error: true 