blueprint:
  name: "Smart Welcome Greeter"
  description: "Advanced welcome greeting system with multiple greeting types, notifications, and smart lockout functionality"
  domain: automation
  input:
    motion_sensor:
      name: "Main Entrance Motion Sensor"
      description: "Motion sensor that detects movement at the main entrance"
      selector:
        entity:
          domain: binary_sensor
    
    slave_motion_sensor:
      name: "Secondary Motion Sensor (Optional)"
      description: "Optional secondary motion sensor (e.g., hallway) for enhanced detection logic"
      default: ""
      selector:
        entity:
          domain: binary_sensor
    
    notification_service:
      name: "Notification Service"
      description: "Service to use for announcements (e.g., TTS, media player, or notify service)"
      selector:
        text:
    
    daily_counter:
      name: "Daily Counter Helper"
      description: "Counter helper to track daily announcements"
      default: "counter.smart_greeter_daily_counter"
      selector:
        entity:
          domain: counter
    
    mailbox_sensor:
      name: "Mailbox Sensor (Optional)"
      description: "Binary sensor indicating if there's mail in the mailbox"
      default: ""
      selector:
        entity:
          domain: binary_sensor
    
    waste_calendar:
      name: "Waste Collection Calendar (Optional)"
      description: "Calendar entity from Waste Collection Schedule integration"
      default: ""
      selector:
        entity:
          domain: calendar
    
    yellow_waste_keywords:
      name: "Yellow Waste Keywords"
      description: "Keywords to identify yellow waste collection (comma separated)"
      selector:
        text:
      default: "yellow,gelb,gelber sack,papier,paper"
    
    black_waste_keywords:
      name: "Black Waste Keywords"
      description: "Keywords to identify black waste collection (comma separated)"
      selector:
        text:
      default: "black,schwarz,restmüll,biomüll,organic,general"
    
    open_windows_sensor:
      name: "Open Windows Sensor (Optional)"
      description: "Binary sensor indicating if windows are open"
      default: ""
      selector:
        entity:
          domain: binary_sensor
    
    open_windows_list:
      name: "Open Windows List (Optional)"
      description: "Entity containing list of rooms with open windows (sensor, input_text, etc.)"
      default: ""
      selector:
        entity:
    
    greeting_probability:
      name: "Random Greeting Probability"
      description: "Probability (0-100%) for random greetings when no slave motion detected"
      default: 50
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
    
    lockout_duration:
      name: "Lockout Duration"
      description: "Time in minutes to prevent repeated greetings"
      default: 15
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: "minutes"
    
    slave_timeout:
      name: "Secondary Sensor Timeout"
      description: "Time in minutes for secondary motion sensor timeout"
      default: 2
      selector:
        number:
          min: 1
          max: 10
          unit_of_measurement: "minutes"
    
    max_daily_info:
      name: "Maximum Daily Information Announcements"
      description: "Maximum number of information announcements per day"
      default: 3
      selector:
        number:
          min: 1
          max: 10
    
    normal_greetings:
      name: "Normal Greetings"
      description: "List of normal greeting messages (one per line)"
      selector:
        text:
          multiline: true
      default: |
        Willkommen zuhause!
        Hallo!
        Schön dich zu sehen!
        Willkommen zurück!
        Sei gegrüßt!
        Hey, wie geht's?
        Schön dich wieder zu sehen!
        Hallo, hallo!
        Willkommen in deinem Smart Home!
        Hi!
        Schön, dass du wieder da bist!
        Hallo Freund!
        Hey, willkommen zuhause!
        Freut mich, dich zu sehen!
        Hallo Sonnenschein!
        Hey Superstar!
        Willkommen daheim!
        Grüß dich!
        Ein herzliches Willkommen!
        Hallo, bist du es, den ich suche?
        Zuhause ist es doch am schönsten!
        Schau mal wer da ist!
        Der verlorene Sohn kehrt heim!
        Willkommen in deinem Schloss!
        Was für eine nette Überraschung!
        Dein Zuhause hat dich vermisst!
        Tritt ein und fühl dich wohl!
        Ah, der Meister kehrt zurück!
        Deine Anwesenheit ehrt uns!
        Willkommen in deinem Refugium!
    
    funny_greetings:
      name: "Funny Greetings"
      description: "List of funny greeting messages (one per line)"
      selector:
        text:
          multiline: true
      default: |
        Schau mal wer sich hier blicken lässt!
        Die Legende ist eingetroffen!
        Warnung: Awesome Person detected!
        Lasst die Konfetti regnen!
        Alarm: VIP hat das Gebäude betreten!
        Meine Damen und Herren, der Star ist da!
        Roter Teppich ist ausgerollt!
        Das Warten hat ein Ende - du bist da!
        Trommelwirbel bitte...
        Breaking News: Du bist zuhause!
        Mission 'Heimkehr' erfolgreich!
        Trautes Heim, Glück allein!
        Dein Thron wartet schon!
        Die Macht ist stark in diesem einen!
        Willkommen zurück in der Kommandozentrale!
    
    movie_greetings:
      name: "Movie Quote Greetings"
      description: "List of movie quote greeting messages (one per line)"
      selector:
        text:
          multiline: true
      default: |
        Möge die Macht mit dir sein!
        Lebe lang und in Frieden!
        Es geht doch nichts über Zuhause!
        Willkommen in der Matrix!
        Bis zur Unendlichkeit und... nach Hause!
        Ich komme wieder... Oh warte, du bist ja schon da!
        Bond. Zuhause Bond.
        Houston, der Bewohner ist gelandet!
        Willkommen im Jurassic Home!
        E.T. nach Hause telefonieren... Oh, du bist ja schon hier!
    
    december_greetings:
      name: "December/Christmas Greetings"
      description: "List of Christmas/winter greeting messages (one per line)"
      selector:
        text:
          multiline: true
      default: |
        Komm rein und wärm dich auf!
        Frohe Weihnachten und willkommen zuhause!
        Ho ho ho, schau mal wer da ist!
        Willkommen in deinem Winterwunderland!
        Draußen ist's kalt - aber hier drin schön warm!
        Schmückt die Hallen, du bist zuhause!
        Kling Glöckchen klingelingeling!
        Der Weihnachtself ist da!
        Willkommen in deinem Weihnachtsparadies!
        Das schönste Weihnachtsgeschenk - du bist zuhause!
    
    mail_notifications:
      name: "Mail Notifications"
      description: "List of mail notification messages (one per line)"
      selector:
        text:
          multiline: true
      default: |
        Du hast Post im Briefkasten
        Es liegt Post für dich bereit
        Schau mal im Briefkasten nach, da ist was für dich
    
    waste_yellow_notifications:
      name: "Yellow Waste Notifications"
      description: "List of yellow waste collection notifications (one per line)"
      selector:
        text:
          multiline: true
      default: |
        Vergiss nicht, den gelben Sack und das Altpapier rauszustellen
        Heute kommt die Müllabfuhr für gelben Sack und Altpapier
        Zeit für gelben Sack und Altpapier
    
    waste_black_notifications:
      name: "Black Waste Notifications"
      description: "List of black waste collection notifications (one per line)"
      selector:
        text:
          multiline: true
      default: |
        Vergiss nicht, die schwarze und braune Tonne rauszustellen
        Heute kommt die Müllabfuhr für Rest- und Biomüll
        Zeit für Rest- und Biomüll
    
    window_notifications:
      name: "Window Notifications"
      description: "List of open window notifications (use {rooms} as placeholder, one per line)"
      selector:
        text:
          multiline: true
      default: |
        In {rooms} sind noch Fenster offen
        Bitte schließe die Fenster in {rooms}
        Die Fenster in {rooms} stehen noch offen

variables:
  # Helper variables for notifications
  mailbox_entity: !input mailbox_sensor
  waste_calendar_entity: !input waste_calendar
  yellow_keywords: !input yellow_waste_keywords
  black_keywords: !input black_waste_keywords
  windows_entity: !input open_windows_sensor
  windows_list_entity: !input open_windows_list
  slave_motion_entity: !input slave_motion_sensor
  max_daily_info: !input max_daily_info
  lockout_duration: !input lockout_duration
  greeting_probability: !input greeting_probability
  notification_service: !input notification_service
  daily_counter: !input daily_counter
  normal_greetings_text: !input normal_greetings
  funny_greetings_text: !input funny_greetings
  movie_greetings_text: !input movie_greetings
  december_greetings_text: !input december_greetings
  mail_notifications_text: !input mail_notifications
  waste_yellow_notifications_text: !input waste_yellow_notifications
  waste_black_notifications_text: !input waste_black_notifications
  window_notifications_text: !input window_notifications


trigger:
  - platform: state
    entity_id: !input motion_sensor
    to: 'on'

condition:
  - condition: template
    value_template: >
      {% set counter_today = states(daily_counter) | int(0) if daily_counter else 0 %}
      {% set max_daily = max_daily_info | int(3) %}
      {% set lockout_minutes = lockout_duration | int(15) %}
      {% set last_triggered = state_attr('automation.' + this.entity_id.split('.')[1], 'last_triggered') %}
      {% set lockout_expired = last_triggered == none or (now() - last_triggered).total_seconds() > (lockout_minutes * 60) %}
      {% set has_waste_today = false %}
      {% if waste_calendar_entity %}
        {% set calendar_event = states(waste_calendar_entity) %}
        {% set event_summary = state_attr(waste_calendar_entity, 'message') | lower %}
        {% set event_today = state_attr(waste_calendar_entity, 'start_time')[:10] == now().strftime('%Y-%m-%d') %}
        {% if calendar_event == 'on' and event_today and event_summary %}
          {% set yellow_words = yellow_keywords.split(',') | map('trim') | map('lower') | list %}
          {% set black_words = black_keywords.split(',') | map('trim') | map('lower') | list %}
          {% set has_waste_today = yellow_words | select('in', event_summary) | list | length > 0 or black_words | select('in', event_summary) | list | length > 0 %}
        {% endif %}
      {% endif %}
      {{ lockout_expired and (counter_today < max_daily or not (
        (mailbox_entity and is_state(mailbox_entity, 'on')) or
        has_waste_today
      )) }}

action:
  - choose:
      # Check if we have information to announce
      - conditions:
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ mailbox_entity and is_state(mailbox_entity, 'on') }}"
              - condition: template
                value_template: >
                  {% if waste_calendar_entity %}
                    {% set calendar_event = states(waste_calendar_entity) %}
                    {% set event_summary = state_attr(waste_calendar_entity, 'message') | lower %}
                    {% set event_today = state_attr(waste_calendar_entity, 'start_time')[:10] == now().strftime('%Y-%m-%d') %}
                    {% if calendar_event == 'on' and event_today and event_summary %}
                      {% set yellow_words = yellow_keywords.split(',') | map('trim') | map('lower') | list %}
                      {% set black_words = black_keywords.split(',') | map('trim') | map('lower') | list %}
                      {{ yellow_words | select('in', event_summary) | list | length > 0 or black_words | select('in', event_summary) | list | length > 0 }}
                    {% else %}
                      false
                    {% endif %}
                  {% else %}
                    false
                  {% endif %}
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ windows_entity and is_state(windows_entity, 'on') }}"
                  - condition: template
                    value_template: "{{ slave_motion_entity and is_state(slave_motion_entity, 'on') }}"
        sequence:
          - variables:
              mail_notifications: "{{ mail_notifications_text.split('\n') | reject('equalto', '') | list }}"
              waste_yellow_notifications: "{{ waste_yellow_notifications_text.split('\n') | reject('equalto', '') | list }}"
              waste_black_notifications: "{{ waste_black_notifications_text.split('\n') | reject('equalto', '') | list }}"
              window_notifications: "{{ window_notifications_text.split('\n') | reject('equalto', '') | list }}"
              info_texts: >
                {% set texts = [] %}
                {% if mailbox_entity and is_state(mailbox_entity, 'on') %}
                  {% set texts = texts + [mail_notifications | random] %}
                {% endif %}
                {% if waste_calendar_entity %}
                  {% set calendar_event = states(waste_calendar_entity) %}
                  {% set event_summary = state_attr(waste_calendar_entity, 'message') | lower %}
                  {% set event_today = state_attr(waste_calendar_entity, 'start_time')[:10] == now().strftime('%Y-%m-%d') %}
                  {% if calendar_event == 'on' and event_today and event_summary %}
                    {% set yellow_words = yellow_keywords.split(',') | map('trim') | map('lower') | list %}
                    {% set black_words = black_keywords.split(',') | map('trim') | map('lower') | list %}
                    {% set has_yellow = yellow_words | select('in', event_summary) | list | length > 0 %}
                    {% set has_black = black_words | select('in', event_summary) | list | length > 0 %}
                    {% if has_yellow %}
                      {% set texts = texts + [waste_yellow_notifications | random] %}
                    {% endif %}
                    {% if has_black %}
                      {% set texts = texts + [waste_black_notifications | random] %}
                    {% endif %}
                  {% endif %}
                {% endif %}
                {% if windows_entity and is_state(windows_entity, 'on') and slave_motion_entity and is_state(slave_motion_entity, 'on') %}
                  {% set rooms = states(windows_list_entity) if windows_list_entity else "some rooms" %}
                  {% set window_text = window_notifications | random %}
                  {% set texts = texts + [window_text.replace('{rooms}', rooms)] %}
                {% endif %}
                {{ texts }}
          
          - choose:
              # Single information announcement
              - conditions:
                  - condition: template
                    value_template: "{{ info_texts | length == 1 }}"
                sequence:
                  - service: !input notification_service
                    data:
                      message: "{{ info_texts[0] }}"
              
              # Multiple information announcements
              - conditions:
                  - condition: template
                    value_template: "{{ info_texts | length > 1 }}"
                sequence:
                  - variables:
                      combined_message: "{{ info_texts | join(' and ') }}"
                  - service: !input notification_service
                    data:
                      message: "{{ combined_message }}"
          
          # Increment daily counter
          - if:
              - condition: template
                value_template: "{{ daily_counter != '' }}"
            then:
              - service: counter.increment
                target:
                  entity_id: "{{ daily_counter }}"
      
      # Random greeting when no slave motion and random chance
      - conditions:
          - condition: template
            value_template: >
              {{ not (slave_motion_entity and is_state(slave_motion_entity, 'on')) }}
          - condition: template
            value_template: >
              {{ (range(0, 100) | random) < (greeting_probability | int(50)) }}
        sequence:
          - variables:
              current_month: "{{ now().month }}"
              current_hour: "{{ now().hour }}"
              normal_greetings: "{{ normal_greetings_text.split('\n') | reject('equalto', '') | list }}"
              funny_greetings: "{{ funny_greetings_text.split('\n') | reject('equalto', '') | list }}"
              movie_greetings: "{{ movie_greetings_text.split('\n') | reject('equalto', '') | list }}"
              december_greetings: "{{ december_greetings_text.split('\n') | reject('equalto', '') | list }}"
              greeting_pool: >
                {% set pool = normal_greetings %}
                {% if range(0, 100) | random < 30 %}
                  {% set pool = pool + funny_greetings %}
                {% endif %}
                {% if range(0, 100) | random < 20 %}
                  {% set pool = pool + movie_greetings %}
                {% endif %}
                {% if current_month == 12 and current_hour >= 18 %}
                  {% set pool = pool + december_greetings %}
                {% endif %}
                {{ pool }}
              selected_greeting: "{{ greeting_pool | random }}"
          
          - service: !input notification_service
            data:
              message: "{{ selected_greeting }}"

mode: single
max_exceeded: silent 