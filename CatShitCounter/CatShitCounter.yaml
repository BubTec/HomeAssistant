blueprint:
  name: "Cat Litter Box Counter and Monitor"
  description: "Comprehensive cat litter box monitoring system that tracks usage, reminds for cleaning, and monitors cleaning tools"
  domain: automation
  input:
    cat_door_sensor:
      name: "Cat Door Occupancy Sensor"
      description: "Binary sensor that detects movement at the cat door"
      selector:
        entity:
          domain: binary_sensor
    
    cleaning_tool_sensor:
      name: "Cleaning Tool Contact Sensor"
      description: "Binary sensor that detects when cleaning tool is opened/taken"
      selector:
        entity:
          domain: binary_sensor
    
    usage_counter:
      name: "Usage Counter Helper"
      description: "Counter helper to track current usage since last cleaning"
      default: "counter.catshit_lastseen"
      selector:
        entity:
          domain: counter
    
    total_counter:
      name: "Total Usage Counter Helper"
      description: "Counter helper to track total usage"
      default: "counter.catshit_totalcounter"
      selector:
        entity:
          domain: counter
    
    clean_counter:
      name: "Cleaning Counter Helper"  
      description: "Counter helper to track number of cleanings"
      default: "counter.catshit_counter"
      selector:
        entity:
          domain: counter
    
    needs_cleaning_helper:
      name: "Needs Cleaning Boolean Helper"
      description: "Input boolean to track if litter box needs cleaning"
      default: "input_boolean.catshit_cleaning"
      selector:
        entity:
          domain: input_boolean
    
    cleaning_tool_alert:
      name: "Cleaning Tool Alert Boolean Helper"
      description: "Input boolean to track if cleaning tool is left open"
      default: "input_boolean.catshit_toolcheck"
      selector:
        entity:
          domain: input_boolean
    
    cat_presence_helper:
      name: "Cat Presence Detection Helper"
      description: "Input boolean to track if cat presence is detected"
      default: "input_boolean.catshit_tracker"
      selector:
        entity:
          domain: input_boolean
    
    notification_service:
      name: "Notification Service"
      description: "Service to send notifications (e.g., notify.mobile_app_phone)"
      selector:
        text:
      default: "notify.all_mobile"
    
    warning_threshold:
      name: "Usage Warning Threshold"
      description: "Number of uses before cleaning warning"
      selector:
        number:
          min: 1
          max: 10
          step: 1
      default: 4
    
    presence_threshold:
      name: "Presence Threshold (seconds)"
      description: "Minimum time cat must be present to count as valid usage"
      selector:
        number:
          min: 10
          max: 120
          step: 5
      default: 30
    
    visit_duration:
      name: "Visit Duration (seconds)"
      description: "Time to wait after presence ends before counting usage"
      selector:
        number:
          min: 30
          max: 300
          step: 10
      default: 120
    
    cleaning_completion_time:
      name: "Cleaning Completion Time (seconds)"
      description: "Time tool must be open to register as cleaning"
      selector:
        number:
          min: 15
          max: 180
          step: 5
      default: 45
    
    notification_start_time:
      name: "Notification Start Time"
      description: "Start time for daily notification window"
      selector:
        time:
      default: "08:00:00"
    
    notification_end_time:
      name: "Notification End Time"
      description: "End time for daily notification window"
      selector:
        time:
      default: "22:00:00"
    
    reminder_interval_hours:
      name: "Reminder Interval (hours)"
      description: "How often to send reminders within notification window"
      selector:
        number:
          min: 1
          max: 12
          step: 1
      default: 4
    
    cleaning_reminder_message:
      name: "Cleaning Reminder Message"
      description: "Custom message for cleaning reminders (use {count} for usage count)"
      selector:
        text:
          multiline: true
      default: "The litter box needs cleaning! Used {count} times since last cleaning."
    
    tool_alert_message:
      name: "Tool Alert Message"
      description: "Custom message when cleaning tool is left open"
      selector:
        text:
          multiline: true
      default: "Warning: The litter box cleaning tool is not properly stored."
    
    inactivity_warning_message:
      name: "Inactivity Warning Message"
      description: "Custom message for prolonged inactivity (48+ hours)"
      selector:
        text:
          multiline: true
      default: "Warning: No activity at the litter box for more than 48 hours. Please check on your cat!"
    
    cleaning_started_message:
      name: "Cleaning Started Message"
      description: "Message when cleaning starts"
      selector:
        text:
          multiline: true
      default: "Cat litter cleaning started. Don't forget to put the tool back!"
    
    cleaning_completed_message:
      name: "Cleaning Completed Message"
      description: "Message when cleaning is completed"
      selector:
        text:
          multiline: true
      default: "Cat litter cleaning completed and counters reset."
    
    tool_stored_message:
      name: "Tool Stored Message"
      description: "Message when cleaning tool is properly stored (only shown if tool was left open)"
      selector:
        text:
          multiline: true
      default: "Cleaning tool properly stored."
    
    enable_persistent_notification:
      name: "Enable Persistent Notification"
      description: "Show persistent notification in Home Assistant sidebar for all users"
      default: true
      selector:
        boolean:
    
    persistent_notification_title:
      name: "Persistent Notification Title"
      description: "Title for the persistent notification in the sidebar"
      default: "üê± Cat Litter Box Status"
      selector:
        text:
          type: text
    
    persistent_notification_auto_dismiss:
      name: "Auto-dismiss Persistent Notification"
      description: "Automatically dismiss the persistent notification after specified time (0 = manual dismiss only)"
      default: 0
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds
          mode: slider
          step: 30

variables:
  warning_threshold: !input warning_threshold
  presence_threshold: !input presence_threshold
  visit_duration: !input visit_duration
  cleaning_completion_time: !input cleaning_completion_time
  notification_start_time: !input notification_start_time
  notification_end_time: !input notification_end_time
  reminder_interval_hours: !input reminder_interval_hours
  cleaning_reminder_message: !input cleaning_reminder_message
  tool_alert_message: !input tool_alert_message
  inactivity_warning_message: !input inactivity_warning_message
  cleaning_started_message: !input cleaning_started_message
  cleaning_completed_message: !input cleaning_completed_message
  tool_stored_message: !input tool_stored_message
  cat_door_sensor: !input cat_door_sensor
  cleaning_tool_sensor: !input cleaning_tool_sensor
  usage_counter: !input usage_counter
  total_counter: !input total_counter
  clean_counter: !input clean_counter
  needs_cleaning_helper: !input needs_cleaning_helper
  cleaning_tool_alert: !input cleaning_tool_alert
  cat_presence_helper: !input cat_presence_helper
  notification_service: !input notification_service
  enable_persistent: !input enable_persistent_notification
  persistent_title: !input persistent_notification_title
  persistent_dismiss_time: !input persistent_notification_auto_dismiss

trigger:
  - platform: state
    entity_id: !input cat_door_sensor
    to: 'on'
    id: "cat_door_opened"
  
  - platform: state
    entity_id: !input cat_door_sensor
    to: 'off'
    id: "cat_door_closed"
  
  - platform: state
    entity_id: !input cleaning_tool_sensor
    id: "cleaning_tool_change"
  
  - platform: state
    entity_id: !input usage_counter
    id: "usage_counter_change"
  
  - platform: state
    entity_id: !input needs_cleaning_helper
    id: "needs_cleaning_change"
  
  - platform: state
    entity_id: !input cleaning_tool_alert
    id: "tool_alert_change"
  
  - platform: time
    at: "00:00:00"
    id: "periodic_check"
    
  - platform: time
    at: "02:00:00"
    id: "periodic_check"
    
  - platform: time
    at: "04:00:00"
    id: "periodic_check"
    
  - platform: time
    at: "06:00:00"
    id: "periodic_check"
    
  - platform: time
    at: "08:00:00"
    id: "periodic_check"
    
  - platform: time
    at: "10:00:00"
    id: "periodic_check"
    
  - platform: time
    at: "12:00:00"
    id: "periodic_check"
    
  - platform: time
    at: "14:00:00"
    id: "periodic_check"
    
  - platform: time
    at: "16:00:00"
    id: "periodic_check"
    
  - platform: time
    at: "18:00:00"
    id: "periodic_check"
    
  - platform: time
    at: "20:00:00"
    id: "periodic_check"
    
  - platform: time
    at: "22:00:00"
    id: "periodic_check"
  
  - platform: homeassistant
    event: start
    id: "initial_check"

condition: []

action:
  - choose:
      # Handle cat door opened
      - conditions:
          - condition: trigger
            id: "cat_door_opened"
          - condition: template
            value_template: "{{ states(cleaning_tool_sensor) == 'off' }}"
        sequence:
          - delay:
              seconds: "{{ presence_threshold }}"
          - if:
              - condition: template
                value_template: "{{ states(cat_door_sensor) == 'on' }}"
            then:
              - service: input_boolean.turn_on
                target:
                  entity_id: !input cat_presence_helper

      # Handle cat door closed
      - conditions:
          - condition: trigger
            id: "cat_door_closed"
          - condition: template
            value_template: "{{ states(cat_presence_helper) == 'on' }}"
          - condition: template
            value_template: "{{ states(cleaning_tool_sensor) == 'off' }}"
        sequence:
          - delay:
              seconds: "{{ visit_duration }}"
          - if:
              - condition: template
                value_template: "{{ states(cat_door_sensor) == 'off' }}"
            then:
              - service: counter.increment
                target:
                  entity_id: !input usage_counter
              - service: counter.increment
                target:
                  entity_id: !input total_counter
              - service: input_boolean.turn_off
                target:
                  entity_id: !input cat_presence_helper

      # Handle cleaning tool changes
      - conditions:
          - condition: trigger
            id: "cleaning_tool_change"
        sequence:
          - choose:
              # Cleaning tool opened
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.to_state.state == 'on' }}"
                sequence:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: !input cleaning_tool_alert
                  - service: !input notification_service
                    data:
                      message: "{{ cleaning_started_message }}"
                  - delay:
                      seconds: "{{ cleaning_completion_time }}"
                  - if:
                      - condition: template
                        value_template: "{{ states(cleaning_tool_sensor) == 'on' }}"
                    then:
                      - service: counter.reset
                        target:
                          entity_id: !input usage_counter
                      - service: counter.increment
                        target:
                          entity_id: !input clean_counter
                      - service: input_boolean.turn_off
                        target:
                          entity_id: !input needs_cleaning_helper
                      - service: input_boolean.turn_off
                        target:
                          entity_id: !input cat_presence_helper
                      - service: !input notification_service
                        data:
                          message: "{{ cleaning_completed_message }}"

              # Cleaning tool closed - only notify if it was left open for too long
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.to_state.state == 'off' }}"
                  - condition: template
                    value_template: "{{ states(cleaning_tool_alert) == 'on' }}"
                sequence:
                  - service: input_boolean.turn_off
                    target:
                      entity_id: !input cleaning_tool_alert
                  - service: !input notification_service
                    data:
                      message: "{{ tool_stored_message }}"

      # Handle usage counter changes
      - conditions:
          - condition: trigger
            id: "usage_counter_change"
        sequence:
          - if:
              - condition: template
                value_template: "{{ states(usage_counter) | int >= warning_threshold }}"
            then:
              - service: input_boolean.turn_on
                target:
                  entity_id: !input needs_cleaning_helper
              - service: !input notification_service
                data:
                  message: >
                    {% set count = states(usage_counter) | int %}
                    {{ cleaning_reminder_message.replace('{count}', count | string) }}

      # Handle needs cleaning helper changes
      - conditions:
          - condition: trigger
            id: "needs_cleaning_change"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_persistent }}"
            then:
              - service: persistent_notification.create
                data:
                  title: "{{ persistent_title }}"
                  message: >-
                    {% if states(needs_cleaning_helper) == 'on' %}
                    üö® **Katzenklo muss gereinigt werden!**
                    {% else %}
                    ‚úÖ **Katzenklo Status OK**
                    {% endif %}
                    
                    üìä **Statistiken:**
                    ‚Ä¢ Aktuelle Nutzung: {{ (states(usage_counter) | default(0) | int) }} (Schwellwert: {{ warning_threshold }})
                    ‚Ä¢ Gesamte Reinigungen: {{ (states(clean_counter) | default(0) | int) }}
                    ‚Ä¢ Gesamte Nutzung: {{ (states(total_counter) | default(0) | int) }}
                    
                    üïê Letzte Nutzung: {{ states(usage_counter).last_changed | as_timestamp | timestamp_custom('%d.%m.%Y %H:%M', true) if states(usage_counter).last_changed and states(usage_counter) != 'unknown' else 'Nie' }}
                    
                    {% if states(cleaning_tool_alert) == 'on' %}
                    ‚ö†Ô∏è **Warnung:** Reinigungswerkzeug ist nicht ordnungsgem√§√ü verstaut!
                    {% endif %}
                  notification_id: "cat_litter_status"

      # Handle tool alert changes
      - conditions:
          - condition: trigger
            id: "tool_alert_change"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_persistent }}"
            then:
              - service: persistent_notification.create
                data:
                  title: "{{ persistent_title }}"
                  message: >-
                    {% if states(needs_cleaning_helper) == 'on' %}
                    üö® **Katzenklo muss gereinigt werden!**
                    {% else %}
                    ‚úÖ **Katzenklo Status OK**
                    {% endif %}
                    
                    üìä **Statistiken:**
                    ‚Ä¢ Aktuelle Nutzung: {{ (states(usage_counter) | default(0) | int) }} (Schwellwert: {{ warning_threshold }})
                    ‚Ä¢ Gesamte Reinigungen: {{ (states(clean_counter) | default(0) | int) }}
                    ‚Ä¢ Gesamte Nutzung: {{ (states(total_counter) | default(0) | int) }}
                    
                    üïê Letzte Nutzung: {{ states(usage_counter).last_changed | as_timestamp | timestamp_custom('%d.%m.%Y %H:%M', true) if states(usage_counter).last_changed and states(usage_counter) != 'unknown' else 'Nie' }}
                    
                    {% if states(cleaning_tool_alert) == 'on' %}
                    ‚ö†Ô∏è **Warnung:** Reinigungswerkzeug ist nicht ordnungsgem√§√ü verstaut!
                    {% endif %}
                  notification_id: "cat_litter_status"

      # Periodic reminder checks with time window and interval control
      - conditions:
          - condition: trigger
            id: "periodic_check"
          - condition: time
            after: !input notification_start_time
            before: !input notification_end_time
          - condition: template
            value_template: >
              {% set current_hour = now().hour %}
              {% set interval = reminder_interval_hours | int %}
              {{ (current_hour % interval) == 0 }}
        sequence:
          - choose:
              # Send cleaning reminder if needed
              - conditions:
                  - condition: template
                    value_template: "{{ states(needs_cleaning_helper) == 'on' }}"
                sequence:
                  - service: !input notification_service
                    data:
                      message: >
                        {% set count = states(usage_counter) | int %}
                        {{ cleaning_reminder_message.replace('{count}', count | string) }}

              # Send tool reminder if left open
              - conditions:
                  - condition: template
                    value_template: "{{ states(cleaning_tool_alert) == 'on' }}"
                sequence:
                  - service: !input notification_service
                    data:
                      message: "{{ tool_alert_message }}"

      # Check for prolonged inactivity (during notification window)
      - conditions:
          - condition: trigger
            id: "periodic_check"
          - condition: time
            after: !input notification_start_time
            before: !input notification_end_time
        sequence:
          - if:
              - condition: template
                value_template: >
                  {% set last_usage = states.sensor.date_time_iso | as_timestamp - (states[cat_door_sensor].last_changed | as_timestamp) %}
                  {% set last_counter_change = states.sensor.date_time_iso | as_timestamp - (states[usage_counter].last_changed | as_timestamp) %}
                  {{ (last_usage > 172800) and (last_counter_change > 172800) }}
            then:
              - service: !input notification_service
                data:
                  message: "{{ inactivity_warning_message }}"

      # Initial startup check
      - conditions:
          - condition: trigger
            id: "initial_check"
        sequence:
          # Check if cleaning is already needed
          - if:
              - condition: template
                value_template: "{{ states(usage_counter) | int >= warning_threshold }}"
            then:
              - service: input_boolean.turn_on
                target:
                  entity_id: !input needs_cleaning_helper
              - service: !input notification_service
                data:
                  message: >
                    {% set count = states(usage_counter) | int %}
                    {{ cleaning_reminder_message.replace('{count}', count | string) }}
          
          # Check if cleaning tool is already open
          - if:
              - condition: template
                value_template: "{{ states(cleaning_tool_sensor) == 'on' }}"
            then:
              - service: input_boolean.turn_on
                target:
                  entity_id: !input cleaning_tool_alert
              - service: !input notification_service
                data:
                  message: "{{ tool_alert_message }}"
          
          # Create initial persistent notification
          - if:
              - condition: template
                value_template: "{{ enable_persistent }}"
            then:
              - service: persistent_notification.create
                data:
                  title: "{{ persistent_title }}"
                  message: >-
                    {% if states(needs_cleaning_helper) == 'on' %}
                    üö® **Katzenklo muss gereinigt werden!**
                    {% else %}
                    ‚úÖ **Katzenklo Status OK**
                    {% endif %}
                    
                    üìä **Statistiken:**
                    ‚Ä¢ Aktuelle Nutzung: {{ (states(usage_counter) | default(0) | int) }} (Schwellwert: {{ warning_threshold }})
                    ‚Ä¢ Gesamte Reinigungen: {{ (states(clean_counter) | default(0) | int) }}
                    ‚Ä¢ Gesamte Nutzung: {{ (states(total_counter) | default(0) | int) }}
                    
                    üïê Letzte Nutzung: {{ states(usage_counter).last_changed | as_timestamp | timestamp_custom('%d.%m.%Y %H:%M', true) if states(usage_counter).last_changed and states(usage_counter) != 'unknown' else 'Nie' }}
                    
                    {% if states(cleaning_tool_alert) == 'on' %}
                    ‚ö†Ô∏è **Warnung:** Reinigungswerkzeug ist nicht ordnungsgem√§√ü verstaut!
                    {% endif %}
                  notification_id: "cat_litter_status"

  # Auto-dismiss persistent notification if configured
  - if:
      - condition: template
        value_template: "{{ enable_persistent and persistent_dismiss_time > 0 }}"
    then:
      - delay:
          seconds: "{{ persistent_dismiss_time }}"
      - service: persistent_notification.dismiss
        data:
          notification_id: "cat_litter_status"

mode: parallel
max: 10
