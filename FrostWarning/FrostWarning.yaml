blueprint:
  name: Smart Frost & Ice Warning System
  description: >
    Sends automated frost and ice warnings based on weather data and temperature sensors.
    Provides different warning levels and customizable messages for vehicle windscreen scraping
    and general frost protection. Works with various weather APIs and temperature sources.
  domain: automation
  input:
    weather_entity:
      name: Weather Entity
      description: Weather entity that provides temperature forecast data
      selector:
        entity:
          domain: weather
      default: ""
    
    temperature_sensor:
      name: Temperature Sensor (Optional)
      description: Additional temperature sensor (e.g., outdoor, car, garage)
      selector:
        entity:
          domain: sensor
          device_class: temperature
      default: ""
    
    frost_threshold_high:
      name: High Frost Risk Threshold
      description: Temperature below which high frost risk warning is sent (°C)
      selector:
        number:
          min: -10
          max: 5
          step: 0.5
          unit_of_measurement: "°C"
      default: 0
    
    frost_threshold_medium:
      name: Medium Frost Risk Threshold  
      description: Temperature below which medium frost risk warning is sent (°C)
      selector:
        number:
          min: -5
          max: 8
          step: 0.5
          unit_of_measurement: "°C"
      default: 3
    
    notification_service:
      name: Notification Service
      description: Service to send frost warnings
      selector:
        text:
      default: "notify.persistent_notification"
    
    warning_time:
      name: Warning Time
      description: Time to send daily frost warnings
      selector:
        time:
      default: "07:00:00"
    
    weekend_warnings:
      name: Include Weekend Warnings
      description: Send warnings on weekends too
      selector:
        boolean:
      default: false
    
    high_risk_message:
      name: High Risk Message
      description: Message for high frost risk (ice scraping definitely needed)
      selector:
        text:
          multiline: true
      default: "❄️ High frost risk! You will definitely need to scrape ice from your windscreen before driving. Current temperature: {temperature}°C"
    
    medium_risk_message:
      name: Medium Risk Message
      description: Message for medium frost risk (ice scraping possibly needed)
      selector:
        text:
          multiline: true
      default: "🌡️ Possible frost risk! You might need to scrape ice from your windscreen. Current temperature: {temperature}°C"
    
    use_hourly_checks:
      name: Enable Hourly Temperature Checks
      description: Check temperature every hour for real-time updates
      selector:
        boolean:
      default: true
    
    location_name:
      name: Location Name (Optional)
      description: Name of location for personalized messages (e.g., "at your home", "in the garage")
      selector:
        text:
      default: ""

mode: single

variables:
  weather_entity: !input weather_entity
  temperature_sensor: !input temperature_sensor
  frost_threshold_high: !input frost_threshold_high
  frost_threshold_medium: !input frost_threshold_medium
  notification_service: !input notification_service
  weekend_warnings: !input weekend_warnings
  high_risk_message: !input high_risk_message
  medium_risk_message: !input medium_risk_message
  location_name: !input location_name

trigger:
  - platform: time
    at: !input warning_time
    id: "morning_warning"
  
  - platform: time_pattern
    hours: "*"
    id: "hourly_check"
    enabled: !input use_hourly_checks

condition:
  - condition: template
    value_template: >
      {% if trigger.id == "morning_warning" %}
        {% if weekend_warnings %}
          true
        {% else %}
          {{ now().weekday() < 5 }}
        {% endif %}
      {% else %}
        true
      {% endif %}

action:
  - variables:
      current_temp: >
        {% if temperature_sensor != "" and states(temperature_sensor) not in ['unknown', 'unavailable'] %}
          {{ states(temperature_sensor) | float }}
        {% elif weather_entity != "" and state_attr(weather_entity, 'temperature') is not none %}
          {{ state_attr(weather_entity, 'temperature') | float }}
        {% else %}
          null
        {% endif %}
      
      forecast_temp: >
        {% if weather_entity != "" %}
          {% set forecast = state_attr(weather_entity, 'forecast') %}
          {% if forecast and forecast | length > 0 %}
            {% set tomorrow = forecast[0] %}
            {% if tomorrow.templow is defined %}
              {{ tomorrow.templow | float }}
            {% elif tomorrow.temperature is defined %}
              {{ tomorrow.temperature | float }}
            {% else %}
              null
            {% endif %}
          {% else %}
            null
          {% endif %}
        {% else %}
          null
        {% endif %}
      
      reference_temp: >
        {% if current_temp is not none %}
          {{ current_temp }}
        {% elif forecast_temp is not none %}
          {{ forecast_temp }}
        {% else %}
          null
        {% endif %}
      
      location_text: >
        {% if location_name != "" %}
          {{ " " + location_name }}
        {% else %}
          ""
        {% endif %}

  - choose:
      # High frost risk
      - conditions:
          - condition: template
            value_template: "{{ reference_temp is not none and reference_temp <= frost_threshold_high }}"
        sequence:
          - service: "{{ notification_service }}"
            data:
              title: "❄️ High Frost Warning"
              message: >
                {{ high_risk_message.replace('{temperature}', reference_temp|string).replace('{location}', location_text) }}
                {% if trigger.id == "hourly_check" %}
                (Updated at {{ now().strftime('%H:%M') }})
                {% endif %}

      # Medium frost risk
      - conditions:
          - condition: template
            value_template: >
              {{ reference_temp is not none and 
                 reference_temp > frost_threshold_high and 
                 reference_temp <= frost_threshold_medium }}
        sequence:
          - service: "{{ notification_service }}"
            data:
              title: "🌡️ Possible Frost Warning"
              message: >
                {{ medium_risk_message.replace('{temperature}', reference_temp|string).replace('{location}', location_text) }}
                {% if trigger.id == "hourly_check" %}
                (Updated at {{ now().strftime('%H:%M') }})
                {% endif %}

      # No warning needed - only log during morning check
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'morning_warning' and reference_temp is not none and reference_temp > frost_threshold_medium }}"
        sequence:
          - service: "{{ notification_service }}"
            data:
              title: "☀️ No Frost Expected"
              message: >
                Good news! No frost expected today. Temperature{{ location_text }}: {{ reference_temp }}°C
                {% if weather_entity != "" %}
                Weather: {{ states(weather_entity) }}
                {% endif %}

  # Store current temperature for history/debugging
  - service: logbook.log
    data:
      name: "Frost Warning System"
      message: >
        Temperature check{{ location_text }}: {{ reference_temp }}°C
        {% if current_temp != reference_temp %}
        (Current: {{ current_temp }}°C, Forecast: {{ forecast_temp }}°C)
        {% endif %}
        Thresholds: High ≤{{ frost_threshold_high }}°C, Medium ≤{{ frost_threshold_medium }}°C 