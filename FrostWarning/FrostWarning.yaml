blueprint:
  name: Frost Warning
  description: >
    Simple blueprint for frost warnings using eiswarnung.de API.
    Sends notifications when frost is detected at your location.
  domain: automation
  input:
    frost_sensor:
      name: Frost Sensor
      description: REST sensor for eiswarnung.de API (see README for setup)
      selector:
        entity:
          domain: sensor
          multiple: false
      default: "sensor.frost_warning_api"
    
    location_device:
      name: Location Device
      description: Select a device tracker with GPS coordinates (e.g., your car, phone)
      selector:
        entity:
          domain: device_tracker
          multiple: false
    
    notification_targets:
      name: Notification Targets
      description: >
        List of notification services to send frost warnings to
        (e.g., notify.mobile_app_iphone, notify.alexa_media)
      default: []
      selector:
        target: {}
    
    notification_title:
      name: Notification Title
      description: Title for the frost warning notification
      default: "Eis Warnung!"
      selector:
        text: {}
    
    warning_message:
      name: Warning Message
      description: Custom warning message template (use {{ location_name }} for location)
      default: "Eis Warnung für {{ location_name }}. Bitte prüfe die aktuellen Frost-Bedingungen bevor du losfährst!"
      selector:
        text:
          multiline: true
    
    warning_time:
      name: Warning Time
      description: Time to send frost warning (24-hour format)
      default: "07:30"
      selector:
        time: {}
    
    warning_days:
      name: Warning Days
      description: Days of the week to send warnings (1=Monday, 7=Sunday)
      default: "weekdays"
      selector:
        select:
          options:
            - label: "Monday to Friday"
              value: "weekdays"
            - label: "Every Day"
              value: "everyday"
            - label: "Weekends Only"
              value: "weekends"
            - label: "Monday Only"
              value: "monday"
            - label: "Custom"
              value: "custom"
          multiple: false
    
    custom_warning_days:
      name: Custom Warning Days
      description: Custom days selection (1=Monday, 7=Sunday)
      default: []
      selector:
        select:
          options:
            - label: "Monday"
              value: "1"
            - label: "Tuesday"
              value: "2"
            - label: "Wednesday"
              value: "3"
            - label: "Thursday"
              value: "4"
            - label: "Friday"
              value: "5"
            - label: "Saturday"
              value: "6"
            - label: "Sunday"
              value: "7"
          multiple: true

  source_url: https://github.com/your-repo/HomeAssistant/blob/main/FrostWarning/FrostWarning.yaml

variables:
  location_device: !input location_device
  lat: "{{ state_attr(location_device, 'latitude') | float }}"
  lng: "{{ state_attr(location_device, 'longitude') | float }}"
  location_name: "{{ state_attr(location_device, 'friendly_name') or location_device }}"
  notification_targets: !input notification_targets
  notification_title: !input notification_title
  warning_message: !input warning_message
  frost_sensor: !input frost_sensor
  warning_time: !input warning_time
  warning_days_input: !input warning_days
  custom_warning_days_input: !input custom_warning_days
  warning_days: >-
    {% if warning_days_input == "weekdays" %}
      [1, 2, 3, 4, 5]
    {% elif warning_days_input == "everyday" %}
      [1, 2, 3, 4, 5, 6, 7]
    {% elif warning_days_input == "weekends" %}
      [6, 7]
    {% elif warning_days_input == "monday" %}
      [1]
    {% elif warning_days_input == "custom" %}
      {{ custom_warning_days_input | map('int') | list }}
    {% else %}
      [1, 2, 3, 4, 5]
    {% endif %}

trigger:
  # Daily warning at specified time
  - platform: time
    at: !input warning_time

condition:
  # Check if today is a warning day
  - condition: template
    value_template: >
      {% set today = now().isoweekday() %}
      {% set warning_days = warning_days | list %}
      {{ today in warning_days }}

action:
  - alias: "Check frost and send warning if needed"
    sequence:
      # Get frost level from sensor
      - variables:
          frost_level: "{{ states(frost_sensor) | int(0) }}"
      
      # Only send notification if frost detected (Level 1 or 2)
      - if:
          - condition: template
            value_template: "{{ frost_level in [1, 2] }}"
        then:
          # Send frost warning to device
          - service: notify.send_message
            target: "{{ notification_targets }}"
            data:
              title: "{{ notification_title }}"
              message: >-
                {% if frost_level == 1 %}
                  Du musst heute kratzen! Frost-Level: {{ frost_level }}, Standort: {{ location_name }}
                {% elif frost_level == 2 %}
                  Du musst eventuell kratzen! Frost-Level: {{ frost_level }}, Standort: {{ location_name }}
                {% endif %}
          
          # Log warning sent
          - service: persistent_notification.create
            data:
              title: "Eis Warnung Gesendet"
              message: >
                Eis Warnung gesendet am {{ as_timestamp(now()) | timestamp_custom('%d.%m.%Y %H:%M', true) }}.
                Frost-Level: {{ frost_level }}
                Standort: {{ location_name }}
        else:
          # Log no frost detected
          - service: persistent_notification.create
            data:
              title: "Kein Frost"
              message: >
                Kein Frost erkannt am {{ as_timestamp(now()) | timestamp_custom('%d.%m.%Y %H:%M', true) }}.
                Frost-Level: {{ frost_level }}
                Standort: {{ location_name }}

mode: single 