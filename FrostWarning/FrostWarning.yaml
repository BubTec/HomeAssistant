blueprint:
  name: Frost Warning
  description: >
    Simple blueprint for frost warnings using eiswarnung.de API.
    Sends notifications when frost is detected at your location.
  domain: automation
  input:
    frost_api_key:
      name: Frost API Key
      description: API key for eiswarnung.de service
      selector:
        text: {}
    
    location_device:
      name: Location Device
      description: Select a device tracker with GPS coordinates (e.g., your car, phone)
      selector:
        entity:
          domain: device_tracker
          multiple: false
    
    notification_targets:
      name: Notification Targets
      description: >
        List of notification services to send frost warnings to
        (e.g., notify.mobile_app_iphone, notify.alexa_media)
      default: []
      selector:
        target: {}
    
    notification_title:
      name: Notification Title
      description: Title for the frost warning notification
      default: "Frost Warning!"
      selector:
        text: {}
    
    warning_time:
      name: Warning Time
      description: Time to send frost warning (24-hour format)
      default: "07:30"
      selector:
        time: {}
    
    warning_days:
      name: Warning Days
      description: Days of the week to send warnings (1=Monday, 7=Sunday)
      default: "weekdays"
      selector:
        select:
          options:
            - label: "Monday to Friday"
              value: "weekdays"
            - label: "Every Day"
              value: "everyday"
            - label: "Weekends Only"
              value: "weekends"
            - label: "Monday Only"
              value: "monday"
            - label: "Custom"
              value: "custom"
          multiple: false
    
    custom_warning_days:
      name: Custom Warning Days
      description: Custom days selection (1=Monday, 7=Sunday)
      default: []
      selector:
        select:
          options:
            - label: "Monday"
              value: "1"
            - label: "Tuesday"
              value: "2"
            - label: "Wednesday"
              value: "3"
            - label: "Thursday"
              value: "4"
            - label: "Friday"
              value: "5"
            - label: "Saturday"
              value: "6"
            - label: "Sunday"
              value: "7"
          multiple: true

  source_url: https://github.com/your-repo/HomeAssistant/blob/main/FrostWarning/FrostWarning.yaml

variables:
  location_device: !input location_device
  lat: "{{ state_attr(location_device, 'latitude') | float }}"
  lng: "{{ state_attr(location_device, 'longitude') | float }}"
  location_name: "{{ state_attr(location_device, 'friendly_name') or location_device }}"
  notification_targets: !input notification_targets
  warning_time: !input warning_time
  warning_days: >-
    {% if input.warning_days == "weekdays" %}
      [1, 2, 3, 4, 5]
    {% elif input.warning_days == "everyday" %}
      [1, 2, 3, 4, 5, 6, 7]
    {% elif input.warning_days == "weekends" %}
      [6, 7]
    {% elif input.warning_days == "monday" %}
      [1]
    {% elif input.warning_days == "custom" %}
      {{ input.custom_warning_days | map('int') | list }}
    {% else %}
      [1, 2, 3, 4, 5]
    {% endif %}

trigger:
  # Daily warning at specified time
  - platform: time
    at: !input warning_time

condition:
  # Check if today is a warning day
  - condition: template
    value_template: >
      {% set today = now().isoweekday() %}
      {% set warning_days = warning_days | list %}
      {{ today in warning_days }}

action:
  - alias: "Check frost forecast and send warning"
    sequence:
      # Get frost forecast from API
      - alias: "Get frost forecast level"
        service: rest.get
        data:
          url: >-
            https://api.eiswarnung.de?key={{ input.frost_api_key }}&lat={{ lat }}&lng={{ lng }}
          timeout: 10
      
      # Send notification if frost detected
      - alias: "Send frost warning notification"
        if:
          - condition: template
            value_template: >
              {% set response = states('sensor.rest_eiswarnung') %}
              {% if response not in ['unknown', 'unavailable'] %}
                {% set data = response | from_json %}
                {% set forecast_id = data.result.forecastId %}
                {{ forecast_id in [1, 2] }}
              {% else %}
                false
              {% endif %}
        then:
          - variables:
              response: "{{ states('sensor.rest_eiswarnung') }}"
              data: "{{ response | from_json }}"
              forecast_id: "{{ data.result.forecastId }}"
              warning_message: >-
                {% if forecast_id == 1 %}
                  You need to scrape your windshield today before driving! 
                  Location: {{ location_name }}
                {% elif forecast_id == 2 %}
                  You might need to scrape your windshield today before driving! 
                  Location: {{ location_name }}
                {% endif %}
              timestamp: "{{ as_timestamp(now()) | timestamp_custom('%d.%m.%Y %H:%M', true) }}"
          
          - repeat:
              for_each: "{{ notification_targets }}"
              sequence:
                - service: notify.send_message
                  target: "{{ repeat.item }}"
                  data:
                    title: !input notification_title
                    message: "{{ warning_message }}"
      
      # Log warning sent
      - alias: "Log frost warning sent"
        if:
          - condition: template
            value_template: >
              {% set response = states('sensor.rest_eiswarnung') %}
              {% if response not in ['unknown', 'unavailable'] %}
                {% set data = response | from_json %}
                {% set forecast_id = data.result.forecastId %}
                {{ forecast_id in [1, 2] }}
              {% else %}
                false
              {% endif %}
        then:
          - service: persistent_notification.create
            data:
              title: "Frost Warning Sent"
              message: >
                Frost warning sent at {{ timestamp }}.
                Location: {{ location_name }}
                Frost level: {{ forecast_id }}

mode: single 