blueprint:
  name: German Ice Warning System (eiswarnung.de)
  description: >
    Advanced ice warning system using the German eiswarnung.de API for accurate frost predictions.
    Provides professional ice forecasts with optional temperature sensor integration for additional context.
    Perfect for German locations with precise windscreen scraping predictions.
  domain: automation
  input:
    eiswarnung_sensor:
      name: Eiswarnung Forecast Sensor
      description: RESTful sensor that provides eiswarnung.de forecast ID (see README for setup)
      selector:
        entity:
          domain: sensor
      default: ""
    
    temperature_sensor:
      name: Temperature Sensor (Optional)
      description: Additional temperature sensor for local readings (e.g., car, garage)
      selector:
        entity:
          domain: sensor
          device_class: temperature
      default: ""
    
    notification_service:
      name: Notification Service
      description: Service to send ice warnings
      selector:
        text:
      default: "notify.persistent_notification"
    
    warning_time:
      name: Morning Warning Time
      description: Time to send daily ice warnings
      selector:
        time:
      default: "07:30:00"
    
    weekend_warnings:
      name: Include Weekend Warnings
      description: Send warnings on weekends too
      selector:
        boolean:
      default: false
    
    high_risk_message:
      name: High Risk Message (Level 1)
      description: Message when ice scraping is definitely needed
      selector:
        text:
          multiline: true
      default: "❄️ Eiswarnung Stufe 1! Du musst heute die Scheiben kratzen, bevor du mit dem Auto fährst!{temp_info}"
    
    medium_risk_message:
      name: Medium Risk Message (Level 2)
      description: Message when ice scraping might be needed
      selector:
        text:
          multiline: true
      default: "🌡️ Eiswarnung Stufe 2! Vielleicht musst du heute die Scheiben kratzen, bevor du mit dem Auto fährst!{temp_info}"
    
    location_name:
      name: Location Name (Optional)
      description: Name for personalized messages (e.g., "at your car", "in Munich")
      selector:
        text:
      default: ""

mode: single

variables:
  eiswarnung_sensor: !input eiswarnung_sensor
  temperature_sensor: !input temperature_sensor
  notification_service: !input notification_service
  weekend_warnings: !input weekend_warnings
  high_risk_message: !input high_risk_message
  medium_risk_message: !input medium_risk_message
  location_name: !input location_name

trigger:
  - platform: time
    at: !input warning_time
    id: "morning_warning"
  
  - platform: state
    entity_id: !input eiswarnung_sensor
    id: "sensor_update"

condition:
  # Skip if no eiswarnung sensor configured
  - condition: template
    value_template: "{{ eiswarnung_sensor != '' }}"
  
  # Weekend check
  - condition: template
    value_template: >
      {% if weekend_warnings %}
        true
      {% else %}
        {{ now().weekday() < 5 }}
      {% endif %}

action:
  - variables:
      location_text: >
        {% if location_name != "" %}
          {{ " " + location_name }}
        {% else %}
          ""
        {% endif %}
      
      forecast_id: >
        {% if eiswarnung_sensor != "" and states(eiswarnung_sensor) not in ['unknown', 'unavailable'] %}
          {{ states(eiswarnung_sensor) | int }}
        {% else %}
          0
        {% endif %}
      
      current_temp: >
        {% if temperature_sensor != "" and states(temperature_sensor) not in ['unknown', 'unavailable'] %}
          {{ states(temperature_sensor) | float }}
        {% else %}
          none
        {% endif %}
      
      temp_info: >
        {% if current_temp is not none %}
          {{ " Aktuelle Temperatur" + location_text + ": " + current_temp | round(1) | string + "°C" }}
        {% else %}
          ""
        {% endif %}

  - choose:
      # High ice risk (Level 1)
      - conditions:
          - condition: template
            value_template: "{{ forecast_id == 1 }}"
        sequence:
          - service: "{{ notification_service }}"
            data:
              title: "❄️ Eiswarnung Stufe 1"
              message: >
                {{ high_risk_message.replace('{temp_info}', temp_info) }}
                {% if trigger.id == "sensor_update" %}
                (Aktualisiert um {{ now().strftime('%H:%M') }})
                {% endif %}

      # Medium ice risk (Level 2)  
      - conditions:
          - condition: template
            value_template: "{{ forecast_id == 2 }}"
        sequence:
          - service: "{{ notification_service }}"
            data:
              title: "🌡️ Eiswarnung Stufe 2"
              message: >
                {{ medium_risk_message.replace('{temp_info}', temp_info) }}
                {% if trigger.id == "sensor_update" %}
                (Aktualisiert um {{ now().strftime('%H:%M') }})
                {% endif %} 